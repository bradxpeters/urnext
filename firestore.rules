rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper functions
    function isSignedIn() {
      return request.auth != null;
    }
    
    function isWatchlistMember(watchlistId) {
      let watchlist = get(/databases/$(database)/documents/watchlists/$(watchlistId));
      return isSignedIn() && watchlist != null && request.auth.uid in watchlist.data.users;
    }

    // Users collection
    match /users/{userId} {
      allow read: if request.auth != null;
      allow write: if request.auth != null && (
        request.auth.uid == userId ||
        // Allow updating watchlistInvites array for any user
        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['watchlistInvites'])
      );
    }
    
    // Watchlists collection
    match /watchlists/{watchlistId} {
      allow read: if request.auth != null;
      
      allow update: if request.auth != null && (
        // Either you're already a member
        request.auth.uid in resource.data.users ||
        // Or you're being added to the users array
        request.auth.uid in request.resource.data.users
      );
    }
    
    // Watchlist items collection
    match /watchlistItems/{itemId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null;
      allow update, delete: if request.auth != null && 
        request.auth.uid in get(/databases/$(database)/documents/watchlists/$(resource.data.watchlistId)).data.users;
    }

    // Pending invites collection
    match /pendingInvites/{inviteId} {
      allow read: if request.auth != null;
      allow create: if request.auth != null && 
        request.auth.uid in get(/databases/$(database)/documents/watchlists/$(request.resource.data.watchlistId)).data.users;
      allow delete: if request.auth != null;
    }
  }
} 